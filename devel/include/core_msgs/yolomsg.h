// Generated by gencpp from file core_msgs/yolomsg.msg
// DO NOT EDIT!


#ifndef CORE_MSGS_MESSAGE_YOLOMSG_H
#define CORE_MSGS_MESSAGE_YOLOMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace core_msgs
{
template <class ContainerAllocator>
struct yolomsg_
{
  typedef yolomsg_<ContainerAllocator> Type;

  yolomsg_()
    : num(0)
    , className()
    , x1()
    , y1()
    , x2()
    , y2()
    , score()  {
    }
  yolomsg_(const ContainerAllocator& _alloc)
    : num(0)
    , className(_alloc)
    , x1(_alloc)
    , y1(_alloc)
    , x2(_alloc)
    , y2(_alloc)
    , score(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _num_type;
  _num_type num;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _className_type;
  _className_type className;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x1_type;
  _x1_type x1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y1_type;
  _y1_type y1;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x2_type;
  _x2_type x2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y2_type;
  _y2_type y2;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::core_msgs::yolomsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_msgs::yolomsg_<ContainerAllocator> const> ConstPtr;

}; // struct yolomsg_

typedef ::core_msgs::yolomsg_<std::allocator<void> > yolomsg;

typedef boost::shared_ptr< ::core_msgs::yolomsg > yolomsgPtr;
typedef boost::shared_ptr< ::core_msgs::yolomsg const> yolomsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core_msgs::yolomsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core_msgs::yolomsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::core_msgs::yolomsg_<ContainerAllocator1> & lhs, const ::core_msgs::yolomsg_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.className == rhs.className &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::core_msgs::yolomsg_<ContainerAllocator1> & lhs, const ::core_msgs::yolomsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace core_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::yolomsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::yolomsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::yolomsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::yolomsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::yolomsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::yolomsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core_msgs::yolomsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1607a196c1d846520e717e25497400be";
  }

  static const char* value(const ::core_msgs::yolomsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1607a196c1d84652ULL;
  static const uint64_t static_value2 = 0x0e717e25497400beULL;
};

template<class ContainerAllocator>
struct DataType< ::core_msgs::yolomsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core_msgs/yolomsg";
  }

  static const char* value(const ::core_msgs::yolomsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core_msgs::yolomsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 num\n"
"string[] className\n"
"float64[] x1\n"
"float64[] y1\n"
"float64[] x2\n"
"float64[] y2\n"
"float64[] score \n"
"\n"
;
  }

  static const char* value(const ::core_msgs::yolomsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core_msgs::yolomsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.className);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolomsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_msgs::yolomsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core_msgs::yolomsg_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num);
    s << indent << "className[]" << std::endl;
    for (size_t i = 0; i < v.className.size(); ++i)
    {
      s << indent << "  className[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.className[i]);
    }
    s << indent << "x1[]" << std::endl;
    for (size_t i = 0; i < v.x1.size(); ++i)
    {
      s << indent << "  x1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x1[i]);
    }
    s << indent << "y1[]" << std::endl;
    for (size_t i = 0; i < v.y1.size(); ++i)
    {
      s << indent << "  y1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y1[i]);
    }
    s << indent << "x2[]" << std::endl;
    for (size_t i = 0; i < v.x2.size(); ++i)
    {
      s << indent << "  x2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x2[i]);
    }
    s << indent << "y2[]" << std::endl;
    for (size_t i = 0; i < v.y2.size(); ++i)
    {
      s << indent << "  y2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y2[i]);
    }
    s << indent << "score[]" << std::endl;
    for (size_t i = 0; i < v.score.size(); ++i)
    {
      s << indent << "  score[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.score[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_MSGS_MESSAGE_YOLOMSG_H
